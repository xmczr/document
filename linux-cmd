1. core pattern
cat /proc/sys/kernel/core_pattern

2. CMake manual
https://www.cnblogs.com/coderfenghc/archive/2012/06/16/CMake_ch_01.html

3. 监测网络流量 sar
   apt-get install sysstat
   vim /etc/default/sysstat 修改ENABLE="false" 为ENABLE="true"
   service sysstat restart

   sar -n DEV 1 #循环一秒钟刷新一次

4. 性能监控工具 dstat
   dstat 命令是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具，是一个全能系统信息统计工具
   直接使用，默认使用的参数是-cdngy，分别显示cpu、disk、net、page、system信息

5. Linux任务前后台切换
   假设你发现前台运行的一个程序需要很长的时间，但是需要干其他的事情，你就可以用 Ctrl-Z ，终止这个程序，然后可以看到系统提示：
   [1]+ Stopped /root/bin/rsync.sh
   如果没有此提示，则用 jobs 命令查看任务：
   #jobs
   [1]+ suspended /root/bin/rsync.sh &
   然后我们可以把程序调度到后台执行：（bg 后面的数字为作业号）
   #bg 1
   [1]+ /root/bin/rsync.sh &
   用 jobs 命令查看正在运行的任务：
   #jobs
   [1]+ Running /root/bin/rsync.sh &
   如果想把它调回到前台运行，可以用
   #fg 1
   /root/bin/rsync.sh
   这样，你在控制台上就只能等待这个任务完成了。 

6. 查看线程树
   pstree [pid]

7. 查看端口是否有使用
   lsof -i:xx

8. 查看CPU占用情况
   单个进程: top -b -n 1 -p $PID
   单个进程中的所有线程： top -b -n 1 -Hp $PID

9. screen
   增加一个后台窗口，可以通过前端窗口对其进行管理
   screen -s xxx.sh   创建视窗时执行的shell脚本
   ctrl+a+d 退出当前attach的视窗
   screen -ls 查看视窗信息
   screen -r xxxx  连接现有的视窗, xxxx是视窗编号，通过-ls命令查询

10. 查看当前目录的占用空间，并按序排列
   du -h --max-depth=1 . | sort

11. awk分割
   echo "xxx yyy zzz" | awk -F ' ' '{print $1 $2}'

12. coredump文件设置
   12.1 设置core文件的大小限制  ulimiit -c unlimited / 查询用ulimit -c
   12.2 设置core文件路径 echo "/data01/corefile/core-%e-%p-%t" > /proc/sys/kernel/core_pattern

13. 查看网卡速率/模式
   ethtool eth_name

14. 多核环境中使用cgroup限制进程使用的CPU资源
    14.1 root用户登陆
    14.2 cd /sys/fs/cgroup/cpuset/
    14.3 mkdir test 创建完成以后，test目录下会出现很多cgroup相关的文件
    14.4 cd test
    14.5 vim cpuset.cpus   编辑cpuset.cpus，指定cpu号，例如0-31表示使用前32个核
    14.6 找到需要限制资源的进程
    14.7 vim tasks   编辑tasks，输入进程ID

    注意：进程启动后再设置cgroup，不会动态生效，设置完以后进程需要重启才能生效，但是重启以后，进程ID又会发生变化，使得cgroup的设置无效。那么可以将启动该进程的启动写到一个脚本里面，用脚本来检测启动目标程序。将脚本进程加入到tasks，重新拉起的目标进程会自动加入到tasks中。


